[metadata]
name = powerpwn
author = Michael Bargury
version = 2.1.3

[options]
install_requires = 
    pydantic[email] ==1.10.13
    pydantic ==1.10.7
    swagger-ui-py ==22.7.13
    Flask ==2.2.5
    requests >=2.31.0
    msal >=1.20.0
    responses >=0.23.1
    pytest >=7.2.2
    prance >=0.22.11.4.0
    openapi >=1.1.0
    openapi-spec-validator >=0.5.6
    jsf >=0.7.1
    pillow >=10.0.0
    scandir >=1.10.0
    backports.shutil-get-terminal-size >=1.0.0
    browsepy >=0.5.6
    art
    typing_extensions<4.6.0

package_dir =
    = src
packages = find:

[options.packages.find]
where = src

[options.package_data]
powerpwn =
    powerdump/gui/templates/*.html
    powerdoor/samples/flow_factory_to_install.json

python_requires = >=3.6,<=3.8.10

scripts = src/powerpwn/main.py

[options.entry_points]
console_scripts = 
    powerpwn = powerpwn.main:main

[mypy]
plugins = pydantic.mypy

show_error_codes = true
follow_imports = normal
ignore_errors = false
implicit_reexport = false
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true
allow_redefinition = false
local_partial_types = true
strict_optional = true
strict_equality = true
warn_unused_configs = true
warn_unreachable = true
warn_no_return = true
enable_error_code = "ignore-without-code,unused-awaitable"

# This is becoming the default since Python's PEPs for type hints specify implicit optionals should no longer be supported
no_implicit_optional = true
strict = true

# In many cases we have dynamic code with JSONs and requests etc. and annotate a method's return type trusting it to be correct
warn_return_any = false


# Mypy plugins
[pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true